1.在企业的实际开发中struts很少使用注解，包括hibernate
2.Sring配置文件约束：
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd "
       default-autowire="byName">
3.使用注解配置的步骤：
	             (1):为注解的使用引入约束；（如上）
	             (2):开启注解的使用:<context:conpoent-scan base-package=""></context:conpoent-scan>
	             (3):加注解：@Compoent("user")就可以将User对象加到Spring容器中
4.注解的分类：@Service(Service层) @Controller(WEB层) @Repository(dao层) 三者的功能和@Compoent一样
5.设置对象的scope属性：@Scope(scopeName="prototype") 默认为scopeNaem="singleton"
6.给对象注入值方式：一种:直接加到成员变量上：@Value(""),这是通过反射技术赋值。但这破坏了封装性。因为直接访问了字段。
				二种：加到set方法上：@Value("")
7.给对象注入值类型；@Value("")
	     注入引用类型：@Autowired（当对象只有一个的时候）
	     			  @Qualifier("")(当有多个相同的对象的时候使用这一个)
	     			  @Resource(name="")(手动注入，指明注入那个对象)
8.初始化和销毁方法的注解方式：初始化：@PostConstruct
							  销毁法：@PreDestroy的方
9.junit4和spring整合测试：@RunWith(SpringJUnit4ClassRunner.class)//创建一个容器
10.aop思想：横向重复，纵向抽取
11.aop简介：AOP Aspect Oriented Programming 的缩写，意思为：面向切面编程
12.代理机制：Spring的AOP底层使用了两种代理机制
			 JDK的动态代理：针对实现了接口的类进行代理
			 Cglib的动态代理：针对没有实现接口类的类进行代理，应用的是底层的字节码增强技术，生成当前类的子类对象。
13.spring中的aop：Spring能够为容器中管理的对象生成动态代理对象，以前要使用动态代理，我们要调用下面这个方法
proxy.newProxyInstance(xx,xx,xxx)
14.spring aop的本质就是能够帮我们自动生成动态代理对象。学springaop就是指挥spring帮我们生成动态代理对象。
15.spring aop实现aop的原理：动态代理，cglib代理
                        动态代理： 被代理对象必须实现接口，才能产生代理对象，如果没有接口将不能使用动态代理技术。
                        第三方代理技术：cglib代理，可以对任何类进行代理，代理原理是对目标对象进行继承代理。
                        如果目标对象被final的时候，则无法使用cglib代理。



 16.在spring中，同时使用两种代理模式，如果对象有接口，则优先使用动态代理，否则使用cglib代理。
 17.aop名词学习：
         (1)Joinpoint (连接点)：所谓连接点是指那些被拦截到的点，在spring中，这些方法指的是方法，因为spring只支持方法类型的连接点。
         (2)PointCut(切入点)：所谓切入点指的是我们要对那些Jointpoint进行拦截定义。
         (3)Advice(通知/增强)：所谓拦截通知就是指拦截到JoinPonit之后的事情就是通知，通知分为前置通知和后置通知，异常通知和最终通知，最终通知和环绕通知(切面要完成的功能)
         (4).Introduction(引介)：引介是一种特殊的通知可以在不修改类代码的情况下，Introduction可以在运行期间为类动态的增加一些字段和方法
         (5)Target(目标对象)：代理目标的对象
         (6)Weaving(织入)：指来创建新的把增强应用到目标对象代理对象的过程。
         Spring采用动态代理织入 AspectJ采用在编译期织入和类装载期织入
         (7)proxy(代理)：一个类被AOP织入增强后，就产生一个代理类。
         (8)Aspect(切面)：是切入点和通知的结合；
  18.Joinpoint:目标对象中，所以可以增强的方法
     Pointcut:目标对象中已经增强的方法
     Advice(通知/增强):增强的代码
     Target(目标对象):被代理对象
     Weaving:（织入）将通知/增强应用到切入点的过程
     proxy:将通知应用到目标对象中后，形成代理对象。
     Aspect(切面)：切入点+通知。
   19.spring中应用aop的步骤：
      1.导包+4+2+2+2:分别是4个aop核心包+2个日志包+2个aop包+2个spring需要的两个第三方jar包
      2.准备目标对象，
      3.准备通知/增强代码
      4.配置进行织入，将通知织入目标对象
   20.通知的种类：前置通知：在目标方法运行之前调用
   				  后置通知：如果出现异常将不会调用
   				  环绕通知：目标方法执行前后都会执行
   				  异常拦截通知：如果出现异常则会执行
   				  后置通知:无论是否出现异常都会执行
   	22.将通知织入到目标对象。
   	public void cn.itcast.service.UserServiceImpl.save()
   	void cn.itcast.service.UserServiceImpl.save()
   	* cn.itcast.service.UserServiceImpl.save()
   	* cn.itcast.service.UserServiceImpl.*()
   	* cn.itcast.service.UserServiceImpl.*(..)

   	* cn.itcast.service.*ServiceImpl.*(..)
   	* cn.itcast.service..UserServiceImpl.*()

   	23. <!--准备工作：导入aop约束命名空间-->
    <!--1.配置目标对象-->
    <bean name="userServiceImpl" class="com.gump.proxy.UserServiceImpl"></bean>
    <!--2.配置通知对象-->
    <bean name="myadvice" class="com.gump.proxy.MyAdvice"></bean>
    <!--3.配置将通知织入目标对象-->
    <aop:config>
        <!--配置内容：配置切点：就是配置那些方法是我要执行的-->
        <aop:pointcut id="pc" expression="execution(public void com.gump.proxy.UserServiceImpl.save())"></aop:pointcut>
         <aop:aspect ref="myadvice">
             <aop:before method="before" pointcut-ref="pc"></aop:before>
             <aop:after method="after" pointcut-ref="pc"></aop:after>
             <aop:after-returning method="afterReturning" pointcut-ref="pc"></aop:after-returning>
             <aop:around method="around" pointcut-ref="pc"></aop:around>
             <aop:after-throwing method="afterException" pointcut-ref="pc"></aop:after-throwing>
         </aop:aspect>
    </aop:config>
    24.AOP面向切面的编程思想：横向重复代码，纵向抽取。
     动态代理：1.通过代理可以提现aop思想
     		   2.对aop的目标中的方法进行增强。
     spring aop开发：
     	spring封装了动态代理，我们不需要手写动态代理代码。
     	还封装了cglib代理
     	可以对任何类进行代理增强。


    25.Spring Aop的注解配置：@Aspect表示这个类是一个通知类
    26.所有的相对路径是相对于输出路径，即classes文件，这才是最终要执行的文件因此，如果要找不到相应的文件一定要到这里面去找。
