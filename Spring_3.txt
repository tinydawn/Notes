一.复习：
1.注解代替xml配置
  准备工作：
      4+2+acp包
      xml中导入context约束
      在xml中开启扫描包中的注解
      注解：
      @Compoent("BeanName"),将对象注册到spring容器中
        |-@Controler
        |-@Service
        |-@Repository

      @Scope 指定对象的作用范围
        |-singleton 
        |-prototype

      @Value 值类型注入

      @Autowired 自动属性注入，根据类型注入
      @Qulifier 指定注入对象的名称

      @Resource 指定对象的注入名称

      @PostConstruct 初始化方法
      @PreDestroy 销毁方法

二.Spring Aop开发
  aop思想：横向重复，纵向抽取。
    体现：filter中，动态代理中，interceptor中

  Spring aop:封装了动态代理技术，来体现aop技术


  spring实现：可以对所有对象进行代理
    |-动态代理 代理需要接口
    |-cglib代理 对所有目标对象进行代理

  spring名词：
    join point :连接点，所有可以织入通知的方法
    point cut：切入点，需要|已经织入通知的方法
    advice:需要要增加的代码
    weaving：织入，指将通知应用到切点的过程
    target:目标对象
    proxy：代理对象
    aspect:切面 切点+通知

  步骤：
  (1)导包：
      4+2
      2 aop+aspect
      2 aop联盟+weaving

  (2)准备目标对象
  (3):准备通知类：
      前置通知
      后置通知 方法正常执行
      环绕通知
      异常拦截通知 
      后置通知 无论如何执行
  (4):在aop中配置，导入aop约束
    目标对象
    通知对象
    <aop:config>
      <aop:point-cut id="切点名称" expression="execution(切点表达式)"/>
      <aop:aspect ref="通知对象名称">
        <aop:before method="" pointcut-ref="" />
        <aop:after-returning method="" pointcut-ref="" />
        <aop:around method="" pointcut-ref="" />
        <aop:after-throwing method="" pointcut-ref="" />
        <aop:after method="" pointcut-ref="" />
      </aop:aspect>
    </aop:config>
  扩展：
      (1)导包：
      4+2
      2 aop+aspect
      2 aop联盟+weaving

  (2)准备目标对象
  (3):准备通知类：
      前置通知
      后置通知 方法正常执行
      环绕通知
      异常拦截通知 
      后置通知 无论如何执行
  (4):在aop中配置，导入aop约束
    目标对象
    通知对象
    <aop：aspect-autoproxy>开启注解aop

  (5):注解
    @Aspect 指定当前类是通知类

    @Before 前置通知方法
    @after-returning 后置通知方法
    @around环绕通知方法
    @after-throwing 异常通知方法
    @after 前置通知方法
三。spring整合jdbc和spring中aop的事务：
  1.spring整合jdbc主要学习：
    spring是一个容器，他可以提供一个可以操作数据库的对象(JDBCTemplatejdbc JDBC模板对象)，对象封装了jdbc技术。
    与DButils非常相似
  2.准备工作
  导包：
    4+2
    spring-test
    spring-aop
      c3p0
      jdbc驱动
      spring-jdbc
      spring-tx
    3.如果继承JDBCSupport,则JDBC会根据连接池创建JDBC模板，就不需要手动准备JDBC模板对象。Congo父类方法中获得即可。
    在配置文件中也就不需要配置JDBC模板对象。
    4.事务
      (1).事务的特性：acid
      (2).事务并发产生的问题：脏读，幻读，不可重复读。
      (3).解决事务并发问题的隔离级别：
           读未提交，读已提交，可重复读，串行化。
    5.spring封装了事务的代码：
        打开事务
        提交事务
        回滚事务
    6.因为在不同的平台，操作事务的代码各不相同，spring提供一个接口
       PlatformTransactionMannager接口
       针对不同的平台，这个接口有不同的实现类
       JDBCTransactionManager
       HibenateTransactionManager
       注意在spring中管理事务最核心的东西：
       TransactionManager
     7.spring管理事务的属性介绍：
        事务的隔离级别
        本次事务是否可读
        事务的传播行为(是指在某种情况下，如何管理事务，决定)
        PROPAGION_XXX :事务的传播行为 
      * 保证同一个事务中 
      PROPAGATION_REQUIRED 支持当前事务，如果不存在 就新建一个(默认，最常用) 
      PROPAGATION_SUPPORTS 支持当前事务，如果不存在，就不使用事务 
      PROPAGATION_MANDATORY 支持当前事务，如果不存在，抛出异常 
       
      * 保证没有在同一个事务中 
      PROPAGATION_REQUIRES_NEW 如果有事务存在，挂起当前事务，创建一个新的事务 
      PROPAGATION_NOT_SUPPORTED 以非事务方式运行，如果有事务存在，挂起当前事务 

      PROPAGATION_NEVER 以非事务方式运行，如果有事务存在，抛出异常 
 
            PROPAGATION_NESTED 如果当前事务存在，则嵌套事务执行 
        8.在spring中的service层加事务：
          (1)编码式(了解)
          (2)xml配置aop
          (3)注解配置(aop)

         (1) 步骤：(1)将核心事务管理器配置到spring容器中
                (2)配置事务的核心管理器
                (3)配置事务模板对象 
                (4)使用，并
                 transactionTemplate.execute(new TransactionCallbackWithoutResult() {
            @Override
            protected void doInTransactionWithoutResult(TransactionStatus transactionStatus) {
                ad.subMoney(from,money);
                //加钱
                int i = 1/0;
                ad.addMoney(to,money);
            }
        });
         <bean name="accountService" class="com.gump.account.AccountServiceImpl">
            <property name="ad" ref="accountDao"></property>
            <property name="transactionTemplate" ref="transactionTemplate"></property>
        </bean>

    <!--事务模板对象中使用事务核心管理器-->
    <!--事务核心管理器，封装了所有的事务操作，依赖于连接池-->
    <bean name="transactionManager"  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    (2)xml配置步骤：1.导包:aop+aspect+aop联盟+weaving织入包
            2.导入新的约束：
                beans
                context：注解，读取properties配置文件
                aop：配置aop
                tx；配置事务通知
            3.配置通知

